type Passage {
  id: ID!
  text: String!
  difficulty: Int!
  language: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPassageConnection {
  items: [Passage]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelPassageFilterInput {
  id: ModelIDInput
  text: ModelStringInput
  difficulty: ModelIntInput
  language: ModelStringInput
  and: [ModelPassageFilterInput]
  or: [ModelPassageFilterInput]
  not: ModelPassageFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getPassage(id: ID!): Passage
  listPassages(filter: ModelPassageFilterInput, limit: Int, nextToken: String): ModelPassageConnection
  passagesByLanguageAndDifficulty(language: String, difficulty: ModelIntKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelPassageFilterInput, limit: Int, nextToken: String): ModelPassageConnection
}

input CreatePassageInput {
  id: ID
  text: String!
  difficulty: Int!
  language: String!
}

input UpdatePassageInput {
  id: ID!
  text: String
  difficulty: Int
  language: String
}

input DeletePassageInput {
  id: ID!
}

type Mutation {
  createPassage(input: CreatePassageInput!, condition: ModelPassageConditionInput): Passage
  updatePassage(input: UpdatePassageInput!, condition: ModelPassageConditionInput): Passage
  deletePassage(input: DeletePassageInput!, condition: ModelPassageConditionInput): Passage
}

input ModelPassageConditionInput {
  text: ModelStringInput
  difficulty: ModelIntInput
  language: ModelStringInput
  and: [ModelPassageConditionInput]
  or: [ModelPassageConditionInput]
  not: ModelPassageConditionInput
}

type Subscription {
  onCreatePassage: Passage @aws_subscribe(mutations: ["createPassage"])
  onUpdatePassage: Passage @aws_subscribe(mutations: ["updatePassage"])
  onDeletePassage: Passage @aws_subscribe(mutations: ["deletePassage"])
}

input ModelIntKeyConditionInput {
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}
