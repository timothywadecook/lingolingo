type Profile
  @model
  @key(
    name: "profileByUserId"
    fields: ["userId"]
    queryField: "profileByUserId"
  ) {
  id: ID!
  userId: ID!
  gradingLanguage: String!
  readingLanguage: String!
  difficulty: String!
  theme: String!
  readings: [Reading!]
    @connection(keyName: "readingsByReaderId", fields: ["userId"])
  grades: [Grade!] @connection(keyName: "gradesByReaderId", fields: ["userId"])
}

type Reading
  @model
  @key(
    name: "readingsByLanguage"
    fields: ["language"]
    queryField: "readingsByLanguage"
  )
  @key(
    name: "readingsByReaderId"
    fields: ["readerId", "language"]
    queryField: "readingsByReaderId"
  ) {
  id: ID!
  text: String!
  difficulty: String!
  language: String!
  readerId: ID!
  recording: Recording!
  grades: [Grade!] @connection(keyName: "gradesByReadingId", fields: ["id"])
}

type Grade
  @model
  @key(
    name: "gradesByReadingId"
    fields: ["readingId"]
    queryField: "gradesByReadingId"
  )
  @key(
    name: "gradesByReaderId"
    fields: ["readerId"]
    queryField: "gradesByReaderId"
  )
  @key(
    name: "gradesByGraderId"
    fields: ["graderId"]
    queryField: "gradesByGraderId"
  ) {
  id: ID!
  reading: Reading! @connection(fields: ["readingId"])
  readingId: ID!
  readerId: ID!
  graderId: ID!
  soundsNative: Int!
  understandable: Int!
}

type Recording {
  bucket: String!
  key: String!
  region: String!
}
